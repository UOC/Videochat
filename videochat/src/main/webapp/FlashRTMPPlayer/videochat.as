package edu.uoc{		import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.MovieClip	import flash.external.ExternalInterface;	import flash.net.SharedObject;	import flash.events.NetStatusEvent;	import flash.events.SyncEvent;	import flash.events.AsyncErrorEvent;	import flash.events.StatusEvent;	import flash.net.NetConnection;	import flash.media.Camera;	import flash.media.Microphone;	import flash.net.NetStream;		public class videochat extends MovieClip {						private var nc:NetConnection = null;		private var camera:Camera;		private var microphone:Microphone;		private var nsPublish:NetStream = null;                      		private var nsPlay:NetStream = null;   		private var so:SharedObject;		private var rmtpServer:String = null; 		private var publishNameVar:String = null; 		private var roomIDVar:String = null; 		private var usernameVar:String = null; 						public function videochat() {			// constructor code			// Flash Javascript			// Register the SWF client functions with the container 			ExternalInterface.addCallback("startRecordFromJS", doStartRecord); 			ExternalInterface.addCallback("sendChatMessage", doSendChatMessage); 							stage.align = "TL";			stage.scaleMode = "noScale";						/*var rmtpServer = "rtmp://184.73.205.58/videochat";			var publishNameVar = "123"; */			var paramList:Object = this.root.loaderInfo.parameters;			rmtpServer = paramList["rmtpServer"]; //"rtmp://184.73.205.58/videochat";			publishNameVar = paramList["publishName"]; //"123"; //			roomIDVar = paramList["roomID"]; //"123"; //			usernameVar = paramList["username"]; //"123"; //			if (rmtpServer==null){				rmtpServer = "rtmp://184.73.205.58/videochat";			}			if (usernameVar==null){				usernameVar = "User Test";			}			if (publishNameVar == null) {				publishNameVar = "123"; 			}			if (roomIDVar == null) {				roomIDVar = "roomID"; 			}						startCamera();			stop();		}										public function startCamera()		{				// get the default Flash camera and microphone			camera = Camera.getCamera();			microphone = Microphone.getMicrophone();					// here are all the quality and performance settings that we suggest			if(camera != null)			{				camera.setMode(240, 180, 15, false);				camera.setQuality(0, 88);				camera.setKeyFrameInterval(30);			}			else			{				connect.sourceVideoLabel.text = "No Camera Found\n";			}			if( microphone != null)			{				microphone.rate = 11;				microphone.setSilenceLevel(0); 			}			else			{				connect.sourceVideoLabel.text += "No Microphone Found\n";			}			publishName.text = publishNameVar;			prompt.text = rmtpServer;//"rtmp://184.73.205.58/videochat";			//connect.connectButton.addEventListener(MouseEvent.CLICK, doConnect);			doConnectAuto();			//doPublish.addEventListener(MouseEvent.CLICK, publish);			//doSubscribe.addEventListener(MouseEvent.CLICK, subscribe);				}						public function doConnectAuto()		{			// connect to the Wowza Media Server			if (nc == null)			{				// create a connection to the wowza media server				nc = new NetConnection();				nc.client = this;				nc.connect(rmtpServer, usernameVar, roomIDVar, publishNameVar);					//abertranb receive messages				var clientHandler:Object = new Object();				clientHandler.setRoom = function(room:String) 				{					trace("in setRoom "+room);				};				clientHandler.setUsername = function(username:String) 				{					trace("in setUsername "+username);				};				clientHandler.startRecordClient = function (roomId:String) {					trace("Recording "+roomId);					nc.call("setStreamType", null, "live-record-lowlatency");						};								clientHandler.registeredUser = function (usernameParam: String, roomIdParam:String, publishNameParam:String) {					if (roomIdParam == roomIDVar) {						if (publishNameParam!=publishNameVar) {							ExternalInterface.call("registeredUser", { username:usernameParam, roomId:roomIdParam, publishName:publishNameParam }); 						} else {							ExternalInterface.call("currentUserAcceptConnection"); 						}					}						};												nc.client = clientHandler;				// end abertranb				//canviem el tipus de stream a live				nc.call("setStreamType", null, "live-lowlatency");				//Indiquem 				// get status information from the NetConnection object				nc.addEventListener(NetStatusEvent.NET_STATUS, ncOnStatus);				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);								//connect.connectButton.label = "Disconnect";								// uncomment this to monitor frame rate and buffer length				//setInterval(updateStreamValues, 500);				videoCamera.clear();				videoCamera.attachCamera(camera);				microphone.addEventListener(StatusEvent.STATUS, ncOnStatusMicro);			}			else			{				nsPublish = null;				nsPlay = null;						videoCamera.attachCamera(null);				videoCamera.clear();								videoRemote.attachNetStream(null);				videoRemote.clear();								nc.close();				nc = null;								prompt.text = "";			}		}						public function ncOnStatus(infoObject:NetStatusEvent)		{			trace("nc: "+infoObject.info.code+" ("+infoObject.info.description+")");			if (infoObject.info.code == "NetConnection.Connect.Failed")				prompt.text = "Connection failed: Try rtmp://[server-ip-address]/videochat";			else if (infoObject.info.code == "NetConnection.Connect.Rejected")				prompt.text = infoObject.info.description;		}				//We are listening for the StatusEvent.STATUS on a Microphone object and		//when we receive that we resize the window. 		//For some reason though we are not always getting this StatusEvent back. 		//We are working on this right now and will update when we have more info. 		public function ncOnStatusMicro(infoObject:StatusEvent)		{			if (infoObject.code=="Microphone.Muted") {				trace("The Disabled camera");			} else {				//Enabled it!				publish();				//Canviem a que gravi				nc.call("registerUser", null);							}		}				// function to monitor the frame rate and buffer length		public function updateStreamValues()		{			if (nsPlay != null)			{				fpsText.text = (Math.round(nsPlay.currentFPS*1000)/1000)+" fps";				bufferLenText.text = (Math.round(nsPlay.bufferLength*1000)/1000)+" secs";			}			else			{				fpsText.text = "";				bufferLenText.text = "";			}		}				public function nsPlayOnStatus(infoObject:NetStatusEvent)		{			trace("nsPlay: "+infoObject.info.code+" ("+infoObject.info.description+")");			if (infoObject.info.code == "NetStream.Play.StreamNotFound" || infoObject.info.code == "NetStream.Play.Failed")				prompt.text = infoObject.info.description;		}				public function nsPublishOnStatus(infoObject:NetStatusEvent)		{			trace("nsPublish: "+infoObject.info.code+" ("+infoObject.info.description+")");			if (infoObject.info.code == "NetStream.Play.StreamNotFound" || infoObject.info.code == "NetStream.Play.Failed")				prompt.text = infoObject.info.description;		}				//publish();				//when accept								public function publish()		{								// create a new NetStream object for video publishing				nsPublish = new NetStream(nc);								nsPublish.addEventListener(NetStatusEvent.NET_STATUS, nsPublishOnStatus);								// set the buffer time to zero since it is chat				nsPublish.bufferTime = 0;				// publish the stream by name				nsPublish.publish(publishNameVar);								// add custom metadata to the stream				/*var metaData:Object = new Object();				metaData["description"] = "Chat VideoChat example."				nsPublish.send("@setDataFrame", "onMetaData", metaData);*/						// attach the camera and microphone to the server				nsPublish.attachCamera(camera);				nsPublish.attachAudio(microphone);				setupCallbacks();						}						public function doStartRecord() {			//Canviem a que gravi			nc.call("startRecord", null, "12345");		}						function onAsyncError(e:AsyncErrorEvent) {			trace("Error "+ e.error.message);		}						public function setupCallbacks() 		{ 			// Notify the container that the SWF is ready to be called. 			ExternalInterface.call("setSWFIsReady"); 		}				//Chat stream		public function doSendChatMessage(msg:String) {			//Enviem el missatge al wowza pq faci un broadcast			nc.call("sendChatMessage", null, msg);		}				public function createTheSharedObject() {			if (nc!=null) {				so = SharedObject.getRemote("chat_"+roomIDVar, nc.uri, false);				so.client = this;				so.addEventListener(NetStatusEvent.NET_STATUS, onSoNetStatus);				so.addEventListener(SyncEvent.SYNC, onSoSync);				so.connect(nc);			}		}		public function onSoNetStatus(e:NetStatusEvent) {								}				public function onSoSync(e:SyncEvent) {					}	}	}